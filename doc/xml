<haxe>
	<class path="Array" params="T" file="/usr/lib/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.sort.MergeSort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="/usr/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/lib/haxe/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range).</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There is some extra functions available in the `DateTools` class.

	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="Doc" params="" file="Doc.hx">
		<main public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>* Description
    *</haxe_doc>
		</main>
		<haxe_doc>* Description
*</haxe_doc>
	</class>
	<abstract path="Enum" params="T" file="/usr/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="List" params="T" file="/usr/lib/haxe/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="Map" params="K:V" file="/usr/lib/haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="Map.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="Map.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="Map.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="Map.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"><e>K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="IMap" params="K:V" file="/usr/lib/haxe/std/Map.hx" module="Map" interface="1"><meta><m n=":keep"/></meta></class>
	<typedef path="_Map.Hashable" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map"><a><hashCode set="method"><f a=""><x path="Int"/></f></hashCode></a></typedef>
	<class path="Math" params="" file="/usr/lib/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter, 
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. 

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. 

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with NaN as an operand will result in NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.

		In order to test if a value is NaN, you should use Math.isNaN() function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows, 
		see [https://bugs.php.net/bug.php?id=42143]</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result 
		is -`v`.
		
		If `v` is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is 
		POSITIVE_INFINITY.
		
		If `v` is NaN, the result is NaN.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.
		If `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `a` and `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`, 
		in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`, 
		in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of 
		two specified numbers, in radians.
		
		If parameter `x` or `y`  is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is NaN.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.
		
		exp(1.0) is approximately 2.718281828459.
		
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is NEGATIVE_INFINITY, the result is 0.0.
		If `v` is NaN, the result is NaN.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.
		
		This is the mathematical inverse operation of exp, 
		i.e. `log(exp(v)) == v` always holds.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result 
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is NEGATIVE_INFINITY.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result 
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is 0.0.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.
		
		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0, 
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" get="inline" set="null" line="260" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="264" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="268" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result 
		is false, otherwise the result is true.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is NaN, the result is true, otherwise the result is false. 
		In particular, both POSITIVE_INFINITY and NEGATIVE_INFINITY are
		not considered NaN.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
	</class>
	<class path="Reflect" params="" file="/usr/lib/haxe/std/Reflect.hx" extern="1">
		<hasField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- Class<T>
		- Enum<T>

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method">
	<f a="f">
		<f a="">
			<c path="Array"><d/></c>
			<x path="Void"/>
		</f>
		<d/>
	</f>
	<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
</makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
	</class>
	<class path="Std" params="" file="/usr/lib/haxe/std/Std.hx" extern="1">
		<is public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<instance public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as String, Array and Date.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<string public="1" set="method" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
	</class>
	<abstract path="Void" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.

	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.

	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.

	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.

	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.

		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="/usr/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the string literal syntax "string value".

	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
	</class>
	<class path="StringTools" params="" file="/usr/lib/haxe/std/StringTools.hx">
		<lpad public="1" set="method" line="248" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String "" or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="291" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String "", `by` is inserted after each character
		of `s`. If `by` is also the empty String "", `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Type" params="" file="/usr/lib/haxe/std/Type.hx" extern="1">
		<getClass public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
	</class>
	<enum path="datetime.DTPeriod" params="" file="../src/datetime/DateTime.hx" module="datetime.DateTime">
		<Year a="n"><x path="Int"/></Year>
		<Month a="n"><x path="Int"/></Month>
		<Day a="n"><x path="Int"/></Day>
		<Hour a="n"><x path="Int"/></Hour>
		<Minute a="n"><x path="Int"/></Minute>
		<Second a="n"><x path="Int"/></Second>
		<Week a="n"><x path="Int"/></Week>
		<haxe_doc>* Time periods for date math
*</haxe_doc>
	</enum>
	<abstract path="datetime.DTWeekDay" params="" file="../src/datetime/DateTime.hx" module="datetime.DateTime">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>* Days of week
*</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="datetime._DateTime.DTWeekDay_Impl_" params="" file="../src/datetime/DateTime.hx" private="1" module="datetime.DateTime">
	<Sunday public="1" get="inline" set="null" line="33" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Sunday>
	<Monday public="1" get="inline" set="null" line="34" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Monday>
	<Tuesday public="1" get="inline" set="null" line="35" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Tuesday>
	<Wednesday public="1" get="inline" set="null" line="36" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Wednesday>
	<Thursday public="1" get="inline" set="null" line="37" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Thursday>
	<Friday public="1" get="inline" set="null" line="38" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Friday>
	<Saturday public="1" get="inline" set="null" line="39" static="1">
		<x path="datetime.DTWeekDay"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Saturday>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="datetime._DateTime.DTWeekDay_Impl_" params="" file="../src/datetime/DateTime.hx" private="1" module="datetime.DateTime">
		<Sunday public="1" get="inline" set="null" line="33" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Sunday>
		<Monday public="1" get="inline" set="null" line="34" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Monday>
		<Tuesday public="1" get="inline" set="null" line="35" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Tuesday>
		<Wednesday public="1" get="inline" set="null" line="36" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Wednesday>
		<Thursday public="1" get="inline" set="null" line="37" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Thursday>
		<Friday public="1" get="inline" set="null" line="38" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Friday>
		<Saturday public="1" get="inline" set="null" line="39" static="1">
			<x path="datetime.DTWeekDay"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Saturday>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="datetime.DTSnapDirection" params="" file="../src/datetime/DateTime.hx" module="datetime.DateTime">
		<this><x path="Int"/></this>
		<haxe_doc>* Snap directions for date/time snapping. See DateTime.snap()
*</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="datetime._DateTime.DTSnapDirection_Impl_" params="" file="../src/datetime/DateTime.hx" private="1" module="datetime.DateTime">
	<Up public="1" get="inline" set="null" line="48" static="1">
		<x path="datetime.DTSnapDirection"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Up>
	<Down public="1" get="inline" set="null" line="49" static="1">
		<x path="datetime.DTSnapDirection"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Down>
	<Nearest public="1" get="inline" set="null" line="50" static="1">
		<x path="datetime.DTSnapDirection"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Nearest>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="datetime._DateTime.DTSnapDirection_Impl_" params="" file="../src/datetime/DateTime.hx" private="1" module="datetime.DateTime">
		<Up public="1" get="inline" set="null" line="48" static="1">
			<x path="datetime.DTSnapDirection"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Up>
		<Down public="1" get="inline" set="null" line="49" static="1">
			<x path="datetime.DTSnapDirection"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Down>
		<Nearest public="1" get="inline" set="null" line="50" static="1">
			<x path="datetime.DTSnapDirection"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Nearest>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="datetime.DTSnap" params="" file="../src/datetime/DateTime.hx" module="datetime.DateTime">
		<Year a="direction"><x path="datetime.DTSnapDirection"/></Year>
		<Month a="direction"><x path="datetime.DTSnapDirection"/></Month>
		<Day a="direction"><x path="datetime.DTSnapDirection"/></Day>
		<Hour a="direction"><x path="datetime.DTSnapDirection"/></Hour>
		<Minute a="direction"><x path="datetime.DTSnapDirection"/></Minute>
		<Second a="direction"><x path="datetime.DTSnapDirection"/></Second>
		<Week a="direction:day">
			<x path="datetime.DTSnapDirection"/>
			<x path="datetime.DTWeekDay"/>
		</Week>
		<haxe_doc>* Time periods for date/time snapping. See DateTime.snap()
*</haxe_doc>
	</enum>
	<abstract path="datetime.DateTime" params="" file="../src/datetime/DateTime.hx">
		<from>
			<icast field="fromTime"><x path="Float"/></icast>
			<icast field="fromString"><c path="String"/></icast>
			<icast field="fromDate"><c path="Date"/></icast>
		</from>
		<this><x path="Float"/></this>
		<to><icast field="getTime"><x path="Float"/></icast></to>
		<haxe_doc>* DateTime implementation based on amount of seconds since unix epoch.
* By default all date/time data returned is in UTC.
*</haxe_doc>
		<impl><class path="datetime._DateTime.DateTime_Impl_" params="" file="../src/datetime/DateTime.hx" private="1" module="datetime.DateTime">
	<UNIX_EPOCH_DIFF get="inline" set="null" line="80" static="1">
		<x path="Float"/>
		<haxe_doc>Difference bitween unix epoch and internal number of seconds</haxe_doc>
	</UNIX_EPOCH_DIFF>
	<SECONDS_IN_MINUTE public="1" get="inline" set="null" line="82" static="1"><x path="Int"/></SECONDS_IN_MINUTE>
	<SECONDS_IN_HOUR public="1" get="inline" set="null" line="83" static="1"><x path="Int"/></SECONDS_IN_HOUR>
	<SECONDS_IN_DAY public="1" get="inline" set="null" line="84" static="1"><x path="Int"/></SECONDS_IN_DAY>
	<SECONDS_IN_WEEK public="1" get="inline" set="null" line="85" static="1"><x path="Int"/></SECONDS_IN_WEEK>
	<SECONDS_IN_YEAR public="1" get="inline" set="null" line="86" static="1"><x path="Int"/></SECONDS_IN_YEAR>
	<SECONDS_IN_LEAP_YEAR public="1" get="inline" set="null" line="87" static="1"><x path="Int"/></SECONDS_IN_LEAP_YEAR>
	<SECONDS_IN_3_YEARS get="inline" set="null" line="89" static="1">
		<x path="Int"/>
		<haxe_doc>3 normal years</haxe_doc>
	</SECONDS_IN_3_YEARS>
	<SECONDS_IN_QUAD get="inline" set="null" line="91" static="1">
		<x path="Float"/>
		<haxe_doc>Amount of seconds in 4 years (3 normal years + 1 leap year)</haxe_doc>
	</SECONDS_IN_QUAD>
	<SECONDS_IN_HALF_QUAD get="inline" set="null" line="93" static="1">
		<x path="Float"/>
		<haxe_doc>normal year + normal year</haxe_doc>
	</SECONDS_IN_HALF_QUAD>
	<SECONDS_IN_HALF_QUAD_LEAP get="inline" set="null" line="95" static="1">
		<x path="Float"/>
		<haxe_doc>normal year + leap year</haxe_doc>
	</SECONDS_IN_HALF_QUAD_LEAP>
	<SECONDS_IN_3_PART_QUAD get="inline" set="null" line="97" static="1">
		<x path="Float"/>
		<haxe_doc>normal year + normal year + leap year</haxe_doc>
	</SECONDS_IN_3_PART_QUAD>
	<localOffset line="101" static="1">
		<x path="Int"/>
		<haxe_doc>Cache for local time offset relative to UTC</haxe_doc>
	</localOffset>
	<now public="1" get="inline" set="null" line="108" static="1">
		<f a=""><x path="datetime.DateTime"/></f>
		<haxe_doc><![CDATA[* Get current UTC date&time
    *]]></haxe_doc>
	</now>
	<make public="1" get="inline" set="null" line="139" static="1">
		<f a="?year:?month:?day:?hour:?minute:?second" v="1970:1:1:0:0:0">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="datetime.DateTime"/>
		</f>
		<haxe_doc>* Build DateTime using specified components
    *
    * @param year
    * @param month  - 1-12
    * @param day    - 1-31
    * @param hour   - 0-23
    * @param minute - 0-59
    * @param second - 0-59</haxe_doc>
	</make>
	<fromTime public="1" get="inline" set="null" line="155" static="1">
		<f a="time">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Make DateTime from unix timestamp (amount of seconds)
    *</haxe_doc>
	</fromTime>
	<fromString public="1" get="inline" set="null" line="166" static="1">
		<f a="str">
			<c path="String"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Convert 'YYYY-MM-DD hh:mm:ss' or 'YYYY-MM-DD' to DateTime
    *
    * @throws String - if provided string is not in correct format</haxe_doc>
	</fromString>
	<fromDate public="1" get="inline" set="null" line="176" static="1">
		<f a="date">
			<c path="Date"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Make DateTime instance using unix timestamp retreived from `date`
    *</haxe_doc>
	</fromDate>
	<daysInMonth public="1" get="inline" set="null" line="185" static="1">
		<f a="month:?isLeapYear" v=":false">
			<x path="Int"/>
			<x path="Bool"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get amount of days in specified `month` (1-12). If `month` is 2 (February), you need to
    * specify whether you want to get amount of days in leap year or not.</haxe_doc>
	</daysInMonth>
	<weeksInYear public="1" set="method" line="194" static="1">
		<f a="year">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<haxe_doc>* Get amount of weeks in `year` (52 or 53)
    *</haxe_doc>
	</weeksInYear>
	<isLeap public="1" get="inline" set="null" line="210" static="1">
		<f a="year">
			<x path="Int"/>
			<x path="Bool"/>
		</f>
		<haxe_doc>* Check if specified `year` is a leap year
    *</haxe_doc>
	</isLeap>
	<_new public="1" get="inline" set="null" line="220" static="1">
		<f a="time">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Constructor
    *
    * @param time - unix timestamp (amount of seconds since `1970-01-01 00:00:00`)</haxe_doc>
	</_new>
	<local public="1" set="method" line="235" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Add your current local time UTC offset to this DateTime instance.
    *
    * Does not use your timezone data, just current time offset.
    *
    * If you dont care about your timezone and just need your local time,
    * use this method instead of `Timezone` class.
    *
    * Returns new DateTime instance.</haxe_doc>
	</local>
	<getYear public="1" set="method" line="250" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get year number (4 digits)
    *</haxe_doc>
	</getYear>
	<yearStart public="1" set="method" line="262" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get unix timestamp of a first second of this year
    *</haxe_doc>
	</yearStart>
	<monthStart public="1" set="method" line="279" static="1">
		<f a="this:?month" v=":0">
			<x path="Float"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get unix timestamp of the first second for specified `month` in this year (1-12)
    *
    * If `month` == 0, returns timestamp of current month of this DateTime instance.
    *</haxe_doc>
	</monthStart>
	<isLeapYear public="1" get="inline" set="null" line="289" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Check if this is leap year
    *</haxe_doc>
	</isLeapYear>
	<getMonth public="1" get="inline" set="null" line="298" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get month number (1-12)
    *</haxe_doc>
	</getMonth>
	<getDay public="1" get="inline" set="null" line="308" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get day number (1-31)
    *</haxe_doc>
	</getDay>
	<daysInThisMonth public="1" get="inline" set="null" line="318" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Return amount of days in current month
    *</haxe_doc>
	</daysInThisMonth>
	<getYearDay public="1" get="inline" set="null" line="328" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get day number within a year (1-366)
    *</haxe_doc>
	</getYearDay>
	<weeksInThisYear public="1" set="method" line="337" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get amount of weeks in this year (52 or 53)
    *</haxe_doc>
	</weeksInThisYear>
	<getWeekDay public="1" set="method" line="350" static="1">
		<f a="this:?mondayBased" v=":false">
			<x path="Float"/>
			<x path="Bool"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get day of the week.
    *
    * Returns 0-6 (Sunday-Saturday) by default.
    *
    * Returns 1-7 (Monday-Sunday) if `mondayBased` = true
    *</haxe_doc>
	</getWeekDay>
	<getWeekDayNum public="1" get="inline" set="null" line="369" static="1">
		<f a="this:weekDay:?num" v="::1">
			<x path="Float"/>
			<x path="datetime.DTWeekDay"/>
			<x path="Int"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get DateTime of a specified `weekDay` in this month, which is the `num`st in current month.
    *
    *   E.g. get DateTime of the second Sunday in current month.
    *   If `num` is negative, then required `weekDay` will be searched from the end of this month.
    *   If `num` == 0, returns a copy of this DateTime instance</haxe_doc>
	</getWeekDayNum>
	<getWeek public="1" set="method" line="378" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get current week number within a year according to the ISO 8601 date and time standard
    *</haxe_doc>
	</getWeek>
	<getHour public="1" get="inline" set="null" line="394" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get hour number (0-23)
    *</haxe_doc>
	</getHour>
	<getHour12 public="1" set="method" line="403" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get hour number in 12-hour-clock
    *</haxe_doc>
	</getHour12>
	<getMinute public="1" get="inline" set="null" line="419" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get minumte number (0-59)
    *</haxe_doc>
	</getMinute>
	<getSecond public="1" get="inline" set="null" line="428" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get second number (0-59)
    *</haxe_doc>
	</getSecond>
	<add public="1" set="method" line="437" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Add time period to this timestamp.
    * Returns new DateTime.</haxe_doc>
	</add>
	<sub set="method" line="456" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Substruct time period from this timestamp.
    * This method is used for operator overloading.</haxe_doc>
	</sub>
	<snap public="1" set="method" line="475" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTSnap"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Snap to nearest year, month, day, hour, minute, second or week.
    * Returns new DateTime.</haxe_doc>
	</snap>
	<toString public="1" set="method" line="494" static="1">
		<f a="this">
			<x path="Float"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Convert to string representation in format YYYY-MM-DD HH:MM:SS
    *</haxe_doc>
	</toString>
	<format public="1" set="method" line="556" static="1">
		<f a="this:format">
			<x path="Float"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Format this timestamp according to `format`
    *
    * Day
    *
    *   - `%d`  Two-digit day of the month (with leading zeros) 01 to 31
    *   - `%e`  Day of the month, with a space preceding single digits. 1 to 31
    *   - `%j`  Day of the year, 3 digits with leading zeros    001 to 366
    *   - `%u`  ISO-8601 numeric representation of the day of the week  1 (for Monday) though 7 (for Sunday)
    *   - `%w`  Numeric representation of the day of the week   0 (for Sunday) through 6 (for Saturday)
    *
    * Month
    *
    *   - `%m`  Two digit representation of the month   01 (for January) through 12 (for December)
    *
    * Year
    *
    *   - `%C`  Two digit representation of the century (year divided by 100, truncated to an integer)  19 for the 20th Century
    *   - `%y`  Two digit representation of the year    Example: 09 for 2009, 79 for 1979
    *   - `%Y`  Four digit representation for the year  Example: 2038
    *
    * Week
    *
    *   - `%V`  ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays,
    *   -     with Monday being the start of the week 01 through 53
    *
    * Time
    *
    *   - `%H`  Two digit representation of the hour in 24-hour format  00 through 23
    *   - `%k`  Two digit representation of the hour in 24-hour format, with a space preceding single digits    0 through 23
    *   - `%I`  Two digit representation of the hour in 12-hour format  01 through 12
    *   - `%l`  (lower-case 'L') Hour in 12-hour format, with a space preceding single digits    1 through 12
    *   - `%M`  Two digit representation of the minute  00 through 59
    *   - `%p`  upper-case 'AM' or 'PM' based on the given time Example: AM for 00:31, PM for 22:23
    *   - `%P`  lower-case 'am' or 'pm' based on the given time Example: am for 00:31, pm for 22:23
    *   - `%r`  Same as "%I:%M:%S %p"   Example: 09:34:17 PM for 21:34:17
    *   - `%R`  Same as "%H:%M" Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM
    *   - `%S`  Two digit representation of the second  00 through 59
    *   - `%T`  Same as "%H:%M:%S"  Example: 21:34:17 for 09:34:17 PM
    *
    * Time and Date Stamps
    *
    *   - `%D`  Same as "%m/%d/%y"  Example: 02/05/09 for February 5, 2009
    *   - `%F`  Same as "%Y-%m-%d" (commonly used in database datestamps)   Example: 2009-02-05 for February 5, 2009
    *   - `%s`  Unix Epoch Time timestamp Example: 305815200 for September 10, 1979 08:40:00 AM
    *
    * Miscellaneous
    *
    *   - `%%`  A literal percentage character ("%")</haxe_doc>
	</format>
	<getTime public="1" get="inline" set="null" line="566" static="1">
		<f a="this">
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>* Get unix timestamp (amount of seconds)
    *</haxe_doc>
	</getTime>
	<_fromInt get="inline" set="null" line="575" static="1">
		<f a="time">
			<x path="Int"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n="from"/></meta>
		<haxe_doc>* To convert from/to different types
    *</haxe_doc>
	</_fromInt>
	<gt get="inline" set="null" line="583" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e><![CDATA[A>B]]></e></m>
		</meta>
		<haxe_doc>* DateTime comparison
    *</haxe_doc>
	</gt>
	<gte get="inline" set="null" line="584" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e><![CDATA[A>=B]]></e></m>
		</meta>
	</gte>
	<lt get="inline" set="null" line="585" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e><![CDATA[A<B]]></e></m>
		</meta>
	</lt>
	<lte get="inline" set="null" line="586" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e><![CDATA[A<=B]]></e></m>
		</meta>
	</lte>
	<eq get="inline" set="null" line="587" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A==B</e></m>
		</meta>
	</eq>
	<neq get="inline" set="null" line="588" static="1">
		<f a="this:dt">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A!=B</e></m>
		</meta>
	</neq>
	<mathPlus1 get="inline" set="null" line="595" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A+B</e></m>
		</meta>
		<haxe_doc>* Operator overloading for simple writing `.add()` method
    *</haxe_doc>
	</mathPlus1>
	<mathPlus2 get="inline" set="null" line="596" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>B+A</e></m>
		</meta>
	</mathPlus2>
	<mathPlus3 get="inline" set="null" line="597" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A+=B</e></m>
		</meta>
	</mathPlus3>
	<mathMinus1 get="inline" set="null" line="598" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A-B</e></m>
		</meta>
	</mathMinus1>
	<mathMinus2 get="inline" set="null" line="599" static="1">
		<f a="this:period">
			<x path="Float"/>
			<e path="datetime.DTPeriod"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A+=B</e></m>
		</meta>
	</mathMinus2>
	<dtiCreate get="inline" set="null" line="606" static="1">
		<f a="this:begin">
			<x path="Float"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTimeInterval"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A-B</e></m>
		</meta>
		<haxe_doc>* Operator overloading for simple usage of DateTimeInterval
    *</haxe_doc>
	</dtiCreate>
	<dtiMinus get="inline" set="null" line="607" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A-B</e></m>
		</meta>
	</dtiMinus>
	<dtiPlus1 get="inline" set="null" line="608" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A+B</e></m>
		</meta>
	</dtiPlus1>
	<dtiPlus2 get="inline" set="null" line="609" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>B+A</e></m>
		</meta>
	</dtiPlus2>
	<dtiMinus2 get="inline" set="null" line="610" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A-=B</e></m>
		</meta>
	</dtiMinus2>
	<dtiPlus3 get="inline" set="null" line="611" static="1">
		<f a="this:dti">
			<x path="Float"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A+=B</e></m>
		</meta>
	</dtiPlus3>
</class></impl>
	</abstract>
	<class path="datetime._DateTime.DateTime_Impl_" params="" file="../src/datetime/DateTime.hx" private="1" module="datetime.DateTime">
		<UNIX_EPOCH_DIFF get="inline" set="null" line="80" static="1">
			<x path="Float"/>
			<haxe_doc>Difference bitween unix epoch and internal number of seconds</haxe_doc>
		</UNIX_EPOCH_DIFF>
		<SECONDS_IN_MINUTE public="1" get="inline" set="null" line="82" static="1"><x path="Int"/></SECONDS_IN_MINUTE>
		<SECONDS_IN_HOUR public="1" get="inline" set="null" line="83" static="1"><x path="Int"/></SECONDS_IN_HOUR>
		<SECONDS_IN_DAY public="1" get="inline" set="null" line="84" static="1"><x path="Int"/></SECONDS_IN_DAY>
		<SECONDS_IN_WEEK public="1" get="inline" set="null" line="85" static="1"><x path="Int"/></SECONDS_IN_WEEK>
		<SECONDS_IN_YEAR public="1" get="inline" set="null" line="86" static="1"><x path="Int"/></SECONDS_IN_YEAR>
		<SECONDS_IN_LEAP_YEAR public="1" get="inline" set="null" line="87" static="1"><x path="Int"/></SECONDS_IN_LEAP_YEAR>
		<SECONDS_IN_3_YEARS get="inline" set="null" line="89" static="1">
			<x path="Int"/>
			<haxe_doc>3 normal years</haxe_doc>
		</SECONDS_IN_3_YEARS>
		<SECONDS_IN_QUAD get="inline" set="null" line="91" static="1">
			<x path="Float"/>
			<haxe_doc>Amount of seconds in 4 years (3 normal years + 1 leap year)</haxe_doc>
		</SECONDS_IN_QUAD>
		<SECONDS_IN_HALF_QUAD get="inline" set="null" line="93" static="1">
			<x path="Float"/>
			<haxe_doc>normal year + normal year</haxe_doc>
		</SECONDS_IN_HALF_QUAD>
		<SECONDS_IN_HALF_QUAD_LEAP get="inline" set="null" line="95" static="1">
			<x path="Float"/>
			<haxe_doc>normal year + leap year</haxe_doc>
		</SECONDS_IN_HALF_QUAD_LEAP>
		<SECONDS_IN_3_PART_QUAD get="inline" set="null" line="97" static="1">
			<x path="Float"/>
			<haxe_doc>normal year + normal year + leap year</haxe_doc>
		</SECONDS_IN_3_PART_QUAD>
		<localOffset line="101" static="1">
			<x path="Int"/>
			<haxe_doc>Cache for local time offset relative to UTC</haxe_doc>
		</localOffset>
		<now public="1" get="inline" set="null" line="108" static="1">
			<f a=""><x path="datetime.DateTime"/></f>
			<haxe_doc><![CDATA[* Get current UTC date&time
    *]]></haxe_doc>
		</now>
		<make public="1" get="inline" set="null" line="139" static="1">
			<f a="?year:?month:?day:?hour:?minute:?second" v="1970:1:1:0:0:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Build DateTime using specified components
    *
    * @param year
    * @param month  - 1-12
    * @param day    - 1-31
    * @param hour   - 0-23
    * @param minute - 0-59
    * @param second - 0-59</haxe_doc>
		</make>
		<fromTime public="1" get="inline" set="null" line="155" static="1">
			<f a="time">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Make DateTime from unix timestamp (amount of seconds)
    *</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="166" static="1">
			<f a="str">
				<c path="String"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Convert 'YYYY-MM-DD hh:mm:ss' or 'YYYY-MM-DD' to DateTime
    *
    * @throws String - if provided string is not in correct format</haxe_doc>
		</fromString>
		<fromDate public="1" get="inline" set="null" line="176" static="1">
			<f a="date">
				<c path="Date"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Make DateTime instance using unix timestamp retreived from `date`
    *</haxe_doc>
		</fromDate>
		<daysInMonth public="1" get="inline" set="null" line="185" static="1">
			<f a="month:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get amount of days in specified `month` (1-12). If `month` is 2 (February), you need to
    * specify whether you want to get amount of days in leap year or not.</haxe_doc>
		</daysInMonth>
		<weeksInYear public="1" set="method" line="194" static="1">
			<f a="year">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get amount of weeks in `year` (52 or 53)
    *</haxe_doc>
		</weeksInYear>
		<isLeap public="1" get="inline" set="null" line="210" static="1">
			<f a="year">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if specified `year` is a leap year
    *</haxe_doc>
		</isLeap>
		<_new public="1" get="inline" set="null" line="220" static="1">
			<f a="time">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Constructor
    *
    * @param time - unix timestamp (amount of seconds since `1970-01-01 00:00:00`)</haxe_doc>
		</_new>
		<local public="1" set="method" line="235" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Add your current local time UTC offset to this DateTime instance.
    *
    * Does not use your timezone data, just current time offset.
    *
    * If you dont care about your timezone and just need your local time,
    * use this method instead of `Timezone` class.
    *
    * Returns new DateTime instance.</haxe_doc>
		</local>
		<getYear public="1" set="method" line="250" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get year number (4 digits)
    *</haxe_doc>
		</getYear>
		<yearStart public="1" set="method" line="262" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get unix timestamp of a first second of this year
    *</haxe_doc>
		</yearStart>
		<monthStart public="1" set="method" line="279" static="1">
			<f a="this:?month" v=":0">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get unix timestamp of the first second for specified `month` in this year (1-12)
    *
    * If `month` == 0, returns timestamp of current month of this DateTime instance.
    *</haxe_doc>
		</monthStart>
		<isLeapYear public="1" get="inline" set="null" line="289" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Check if this is leap year
    *</haxe_doc>
		</isLeapYear>
		<getMonth public="1" get="inline" set="null" line="298" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get month number (1-12)
    *</haxe_doc>
		</getMonth>
		<getDay public="1" get="inline" set="null" line="308" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get day number (1-31)
    *</haxe_doc>
		</getDay>
		<daysInThisMonth public="1" get="inline" set="null" line="318" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Return amount of days in current month
    *</haxe_doc>
		</daysInThisMonth>
		<getYearDay public="1" get="inline" set="null" line="328" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get day number within a year (1-366)
    *</haxe_doc>
		</getYearDay>
		<weeksInThisYear public="1" set="method" line="337" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get amount of weeks in this year (52 or 53)
    *</haxe_doc>
		</weeksInThisYear>
		<getWeekDay public="1" set="method" line="350" static="1">
			<f a="this:?mondayBased" v=":false">
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get day of the week.
    *
    * Returns 0-6 (Sunday-Saturday) by default.
    *
    * Returns 1-7 (Monday-Sunday) if `mondayBased` = true
    *</haxe_doc>
		</getWeekDay>
		<getWeekDayNum public="1" get="inline" set="null" line="369" static="1">
			<f a="this:weekDay:?num" v="::1">
				<x path="Float"/>
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get DateTime of a specified `weekDay` in this month, which is the `num`st in current month.
    *
    *   E.g. get DateTime of the second Sunday in current month.
    *   If `num` is negative, then required `weekDay` will be searched from the end of this month.
    *   If `num` == 0, returns a copy of this DateTime instance</haxe_doc>
		</getWeekDayNum>
		<getWeek public="1" set="method" line="378" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get current week number within a year according to the ISO 8601 date and time standard
    *</haxe_doc>
		</getWeek>
		<getHour public="1" get="inline" set="null" line="394" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get hour number (0-23)
    *</haxe_doc>
		</getHour>
		<getHour12 public="1" set="method" line="403" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get hour number in 12-hour-clock
    *</haxe_doc>
		</getHour12>
		<getMinute public="1" get="inline" set="null" line="419" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get minumte number (0-59)
    *</haxe_doc>
		</getMinute>
		<getSecond public="1" get="inline" set="null" line="428" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get second number (0-59)
    *</haxe_doc>
		</getSecond>
		<add public="1" set="method" line="437" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Add time period to this timestamp.
    * Returns new DateTime.</haxe_doc>
		</add>
		<sub set="method" line="456" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Substruct time period from this timestamp.
    * This method is used for operator overloading.</haxe_doc>
		</sub>
		<snap public="1" set="method" line="475" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTSnap"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Snap to nearest year, month, day, hour, minute, second or week.
    * Returns new DateTime.</haxe_doc>
		</snap>
		<toString public="1" set="method" line="494" static="1">
			<f a="this">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Convert to string representation in format YYYY-MM-DD HH:MM:SS
    *</haxe_doc>
		</toString>
		<format public="1" set="method" line="556" static="1">
			<f a="this:format">
				<x path="Float"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Format this timestamp according to `format`
    *
    * Day
    *
    *   - `%d`  Two-digit day of the month (with leading zeros) 01 to 31
    *   - `%e`  Day of the month, with a space preceding single digits. 1 to 31
    *   - `%j`  Day of the year, 3 digits with leading zeros    001 to 366
    *   - `%u`  ISO-8601 numeric representation of the day of the week  1 (for Monday) though 7 (for Sunday)
    *   - `%w`  Numeric representation of the day of the week   0 (for Sunday) through 6 (for Saturday)
    *
    * Month
    *
    *   - `%m`  Two digit representation of the month   01 (for January) through 12 (for December)
    *
    * Year
    *
    *   - `%C`  Two digit representation of the century (year divided by 100, truncated to an integer)  19 for the 20th Century
    *   - `%y`  Two digit representation of the year    Example: 09 for 2009, 79 for 1979
    *   - `%Y`  Four digit representation for the year  Example: 2038
    *
    * Week
    *
    *   - `%V`  ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays,
    *   -     with Monday being the start of the week 01 through 53
    *
    * Time
    *
    *   - `%H`  Two digit representation of the hour in 24-hour format  00 through 23
    *   - `%k`  Two digit representation of the hour in 24-hour format, with a space preceding single digits    0 through 23
    *   - `%I`  Two digit representation of the hour in 12-hour format  01 through 12
    *   - `%l`  (lower-case 'L') Hour in 12-hour format, with a space preceding single digits    1 through 12
    *   - `%M`  Two digit representation of the minute  00 through 59
    *   - `%p`  upper-case 'AM' or 'PM' based on the given time Example: AM for 00:31, PM for 22:23
    *   - `%P`  lower-case 'am' or 'pm' based on the given time Example: am for 00:31, pm for 22:23
    *   - `%r`  Same as "%I:%M:%S %p"   Example: 09:34:17 PM for 21:34:17
    *   - `%R`  Same as "%H:%M" Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM
    *   - `%S`  Two digit representation of the second  00 through 59
    *   - `%T`  Same as "%H:%M:%S"  Example: 21:34:17 for 09:34:17 PM
    *
    * Time and Date Stamps
    *
    *   - `%D`  Same as "%m/%d/%y"  Example: 02/05/09 for February 5, 2009
    *   - `%F`  Same as "%Y-%m-%d" (commonly used in database datestamps)   Example: 2009-02-05 for February 5, 2009
    *   - `%s`  Unix Epoch Time timestamp Example: 305815200 for September 10, 1979 08:40:00 AM
    *
    * Miscellaneous
    *
    *   - `%%`  A literal percentage character ("%")</haxe_doc>
		</format>
		<getTime public="1" get="inline" set="null" line="566" static="1">
			<f a="this">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>* Get unix timestamp (amount of seconds)
    *</haxe_doc>
		</getTime>
		<_fromInt get="inline" set="null" line="575" static="1">
			<f a="time">
				<x path="Int"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n="from"/></meta>
			<haxe_doc>* To convert from/to different types
    *</haxe_doc>
		</_fromInt>
		<gt get="inline" set="null" line="583" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e><![CDATA[A>B]]></e></m>
			</meta>
			<haxe_doc>* DateTime comparison
    *</haxe_doc>
		</gt>
		<gte get="inline" set="null" line="584" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e><![CDATA[A>=B]]></e></m>
			</meta>
		</gte>
		<lt get="inline" set="null" line="585" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e><![CDATA[A<B]]></e></m>
			</meta>
		</lt>
		<lte get="inline" set="null" line="586" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e><![CDATA[A<=B]]></e></m>
			</meta>
		</lte>
		<eq get="inline" set="null" line="587" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A==B</e></m>
			</meta>
		</eq>
		<neq get="inline" set="null" line="588" static="1">
			<f a="this:dt">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A!=B</e></m>
			</meta>
		</neq>
		<mathPlus1 get="inline" set="null" line="595" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A+B</e></m>
			</meta>
			<haxe_doc>* Operator overloading for simple writing `.add()` method
    *</haxe_doc>
		</mathPlus1>
		<mathPlus2 get="inline" set="null" line="596" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>B+A</e></m>
			</meta>
		</mathPlus2>
		<mathPlus3 get="inline" set="null" line="597" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A+=B</e></m>
			</meta>
		</mathPlus3>
		<mathMinus1 get="inline" set="null" line="598" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A-B</e></m>
			</meta>
		</mathMinus1>
		<mathMinus2 get="inline" set="null" line="599" static="1">
			<f a="this:period">
				<x path="Float"/>
				<e path="datetime.DTPeriod"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A+=B</e></m>
			</meta>
		</mathMinus2>
		<dtiCreate get="inline" set="null" line="606" static="1">
			<f a="this:begin">
				<x path="Float"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTimeInterval"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A-B</e></m>
			</meta>
			<haxe_doc>* Operator overloading for simple usage of DateTimeInterval
    *</haxe_doc>
		</dtiCreate>
		<dtiMinus get="inline" set="null" line="607" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A-B</e></m>
			</meta>
		</dtiMinus>
		<dtiPlus1 get="inline" set="null" line="608" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A+B</e></m>
			</meta>
		</dtiPlus1>
		<dtiPlus2 get="inline" set="null" line="609" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>B+A</e></m>
			</meta>
		</dtiPlus2>
		<dtiMinus2 get="inline" set="null" line="610" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A-=B</e></m>
			</meta>
		</dtiMinus2>
		<dtiPlus3 get="inline" set="null" line="611" static="1">
			<f a="this:dti">
				<x path="Float"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A+=B</e></m>
			</meta>
		</dtiPlus3>
	</class>
	<abstract path="datetime.DateTimeInterval" params="" file="../src/datetime/DateTimeInterval.hx">
		<from><icast><c path="datetime.cores.DateTimeIntervalCore"/></icast></from>
		<this><c path="datetime.cores.DateTimeIntervalCore"/></this>
		<to><icast><c path="datetime.cores.DateTimeIntervalCore"/></icast></to>
		<haxe_doc>* Intervals implementation.
*</haxe_doc>
		<meta><m n=":forward">
	<e>negative</e>
	<e>getYears</e>
	<e>getMonths</e>
	<e>getDays</e>
	<e>getHours</e>
	<e>getMinutes</e>
	<e>getSeconds</e>
	<e>getTotalMonths</e>
	<e>getTotalDays</e>
	<e>getTotalHours</e>
	<e>getTotalMinutes</e>
	<e>getTotalSeconds</e>
	<e>getTotalWeeks</e>
</m></meta>
		<impl><class path="datetime._DateTimeInterval.DateTimeInterval_Impl_" params="" file="../src/datetime/DateTimeInterval.hx" private="1" module="datetime.DateTimeInterval">
	<create public="1" set="method" line="22" static="1">
		<f a="begin:end">
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTimeInterval"/>
		</f>
		<haxe_doc>* Create interval as difference between two DateTime instances
    *</haxe_doc>
	</create>
	<_new public="1" get="inline" set="null" line="36" static="1">
		<f a="dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<c path="datetime.cores.DateTimeIntervalCore"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Constructor.
    *</haxe_doc>
	</_new>
	<invert public="1" get="inline" set="null" line="45" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Invert the sign of this interval. Modifies internal state. Returns itself.
    *</haxe_doc>
	</invert>
	<addTo public="1" set="method" line="56" static="1">
		<f a="this:dt">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Add this interval to specified DateTime instance.
    *
    * Returns new DateTime.</haxe_doc>
	</addTo>
	<subFrom public="1" set="method" line="66" static="1">
		<f a="this:dt">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Substract this interval from specified DateTime instance.
    *
    * Returns new DateTime.</haxe_doc>
	</subFrom>
	<toString public="1" set="method" line="75" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get string representation of this interval.
    *</haxe_doc>
	</toString>
	<sign public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>*  Returns -1 if this is a negative interval, +1 otherwise
    *</haxe_doc>
	</sign>
	<format public="1" get="inline" set="null" line="128" static="1">
		<f a="this:format">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Formats the interval
    *
    *   - `%%` Literal %. Example:   %
    *   - `%Y` Years, numeric, at least 2 digits with leading 0. Example:    01, 03
    *   - `%y` Years, numeric. Example:  1, 3
    *   - `%M` Months, numeric, at least 2 digits with leading 0. Example:   01, 03, 12
    *   - `%m` Months, numeric. Example: 1, 3, 12
    *   - `%b` Total number of months. Example:   2, 15, 36
    *   - `%D` Days, numeric, at least 2 digits with leading 0. Example: 01, 03, 31
    *   - `%d` Days, numeric. Example:   1, 3, 31
    *   - `%a` Total number of days. Example:   4, 18, 8123
    *   - `%H` Hours, numeric, at least 2 digits with leading 0. Example:    01, 03, 23
    *   - `%h` Hours, numeric. Example:  1, 3, 23
    *   - `%c` Total number of hours. Example:   4, 18, 8123
    *   - `%I` Minutes, numeric, at least 2 digits with leading 0. Example:  01, 03, 59
    *   - `%i` Minutes, numeric. Example:    1, 3, 59
    *   - `%e` Total number of minutes. Example:   4, 18, 8123
    *   - `%S` Seconds, numeric, at least 2 digits with leading 0. Example:  01, 03, 57
    *   - `%s` Seconds, numeric. Example:    1, 3, 57
    *   - `%f` Total number of seconds. Example:   4, 18, 8123
    *   - `%R` Sign "-" when negative, "+" when positive. Example:   -, +
    *   - `%r` Sign "-" when negative, empty when positive. Example: -,</haxe_doc>
	</format>
	<formatPartial public="1" get="inline" set="null" line="144" static="1">
		<f a="this:format">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<c path="Array"><c path="String"/></c>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Formats using each string in `format` array. Each string can have only one placeholder.
    *
    * Supported placeholders: see `format()` method description except `r,R,%` placeholders.
    *
    * Returns new array with elements, whose corresponding strings in `format` array were filled with non-zero values.
    *
    * Example: if interval contains 0 years, 2 months and 10 days, then
    * `interval.format(['%y years', '%m months', '%d days']).join(',')` will return `'2 months, 10 days'`
    *</haxe_doc>
	</formatPartial>
	<eq set="method" line="153" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A==B</e></m>
		</meta>
		<haxe_doc>* DateTimeInterval comparison
    *</haxe_doc>
	</eq>
	<gt set="method" line="163" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e><![CDATA[A>B]]></e></m>
		</meta>
	</gt>
	<gte get="inline" set="null" line="192" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e><![CDATA[A>=B]]></e></m>
		</meta>
	</gte>
	<lt get="inline" set="null" line="193" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e><![CDATA[A<B]]></e></m>
		</meta>
	</lt>
	<lte get="inline" set="null" line="194" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e><![CDATA[A<=B]]></e></m>
		</meta>
	</lte>
	<neq get="inline" set="null" line="195" static="1">
		<f a="this:dtic">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="datetime.DateTimeInterval"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>A!=B</e></m>
		</meta>
	</neq>
	<getYears public="1" set="method" line="202" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get amount of full years in this interval.
    *</haxe_doc>
	</getYears>
	<getMonths public="1" set="method" line="211" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get amount of full months in this interval (always less then 12)
    *</haxe_doc>
	</getMonths>
	<getTotalMonths public="1" set="method" line="222" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get total amount of months in this interval.
    *
    * E.g. if interval contains 3 years and 5 months, then `interval.getTotalMonths()` returns 3 * 12 + 5 = 41
    *</haxe_doc>
	</getTotalMonths>
	<getDays public="1" set="method" line="231" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get amount of full days in this interval (always less then 31)
    *</haxe_doc>
	</getDays>
	<getTotalDays public="1" set="method" line="240" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get total amount of days in this interval.
    *</haxe_doc>
	</getTotalDays>
	<getHours public="1" set="method" line="249" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get amount of full hours in this interval (always less then 24)
    *</haxe_doc>
	</getHours>
	<getTotalHours public="1" set="method" line="258" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get total amount of hours in this interval.
    *</haxe_doc>
	</getTotalHours>
	<getMinutes public="1" set="method" line="267" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get amount of full minutes in this interval (always less then 60)
    *</haxe_doc>
	</getMinutes>
	<getTotalMinutes public="1" set="method" line="276" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get total amount of minutes in this interval.
    *</haxe_doc>
	</getTotalMinutes>
	<getSeconds public="1" set="method" line="285" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get amount of full seconds in this interval (always less then 60)
    *</haxe_doc>
	</getSeconds>
	<getTotalSeconds public="1" set="method" line="294" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get total amount of seconds in this interval.
    *</haxe_doc>
	</getTotalSeconds>
	<getTotalWeeks public="1" set="method" line="304" static="1">
		<f a="this">
			<c path="datetime.cores.DateTimeIntervalCore"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get total amount of weeks in this interval.
    *
    * Not calendar weeks, but each 7 days.</haxe_doc>
	</getTotalWeeks>
</class></impl>
	</abstract>
	<class path="datetime._DateTimeInterval.DateTimeInterval_Impl_" params="" file="../src/datetime/DateTimeInterval.hx" private="1" module="datetime.DateTimeInterval">
		<create public="1" set="method" line="22" static="1">
			<f a="begin:end">
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTimeInterval"/>
			</f>
			<haxe_doc>* Create interval as difference between two DateTime instances
    *</haxe_doc>
		</create>
		<_new public="1" get="inline" set="null" line="36" static="1">
			<f a="dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<c path="datetime.cores.DateTimeIntervalCore"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Constructor.
    *</haxe_doc>
		</_new>
		<invert public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Invert the sign of this interval. Modifies internal state. Returns itself.
    *</haxe_doc>
		</invert>
		<addTo public="1" set="method" line="56" static="1">
			<f a="this:dt">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Add this interval to specified DateTime instance.
    *
    * Returns new DateTime.</haxe_doc>
		</addTo>
		<subFrom public="1" set="method" line="66" static="1">
			<f a="this:dt">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Substract this interval from specified DateTime instance.
    *
    * Returns new DateTime.</haxe_doc>
		</subFrom>
		<toString public="1" set="method" line="75" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get string representation of this interval.
    *</haxe_doc>
		</toString>
		<sign public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>*  Returns -1 if this is a negative interval, +1 otherwise
    *</haxe_doc>
		</sign>
		<format public="1" get="inline" set="null" line="128" static="1">
			<f a="this:format">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Formats the interval
    *
    *   - `%%` Literal %. Example:   %
    *   - `%Y` Years, numeric, at least 2 digits with leading 0. Example:    01, 03
    *   - `%y` Years, numeric. Example:  1, 3
    *   - `%M` Months, numeric, at least 2 digits with leading 0. Example:   01, 03, 12
    *   - `%m` Months, numeric. Example: 1, 3, 12
    *   - `%b` Total number of months. Example:   2, 15, 36
    *   - `%D` Days, numeric, at least 2 digits with leading 0. Example: 01, 03, 31
    *   - `%d` Days, numeric. Example:   1, 3, 31
    *   - `%a` Total number of days. Example:   4, 18, 8123
    *   - `%H` Hours, numeric, at least 2 digits with leading 0. Example:    01, 03, 23
    *   - `%h` Hours, numeric. Example:  1, 3, 23
    *   - `%c` Total number of hours. Example:   4, 18, 8123
    *   - `%I` Minutes, numeric, at least 2 digits with leading 0. Example:  01, 03, 59
    *   - `%i` Minutes, numeric. Example:    1, 3, 59
    *   - `%e` Total number of minutes. Example:   4, 18, 8123
    *   - `%S` Seconds, numeric, at least 2 digits with leading 0. Example:  01, 03, 57
    *   - `%s` Seconds, numeric. Example:    1, 3, 57
    *   - `%f` Total number of seconds. Example:   4, 18, 8123
    *   - `%R` Sign "-" when negative, "+" when positive. Example:   -, +
    *   - `%r` Sign "-" when negative, empty when positive. Example: -,</haxe_doc>
		</format>
		<formatPartial public="1" get="inline" set="null" line="144" static="1">
			<f a="this:format">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Formats using each string in `format` array. Each string can have only one placeholder.
    *
    * Supported placeholders: see `format()` method description except `r,R,%` placeholders.
    *
    * Returns new array with elements, whose corresponding strings in `format` array were filled with non-zero values.
    *
    * Example: if interval contains 0 years, 2 months and 10 days, then
    * `interval.format(['%y years', '%m months', '%d days']).join(',')` will return `'2 months, 10 days'`
    *</haxe_doc>
		</formatPartial>
		<eq set="method" line="153" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A==B</e></m>
			</meta>
			<haxe_doc>* DateTimeInterval comparison
    *</haxe_doc>
		</eq>
		<gt set="method" line="163" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e><![CDATA[A>B]]></e></m>
			</meta>
		</gt>
		<gte get="inline" set="null" line="192" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e><![CDATA[A>=B]]></e></m>
			</meta>
		</gte>
		<lt get="inline" set="null" line="193" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e><![CDATA[A<B]]></e></m>
			</meta>
		</lt>
		<lte get="inline" set="null" line="194" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e><![CDATA[A<=B]]></e></m>
			</meta>
		</lte>
		<neq get="inline" set="null" line="195" static="1">
			<f a="this:dtic">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="datetime.DateTimeInterval"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>A!=B</e></m>
			</meta>
		</neq>
		<getYears public="1" set="method" line="202" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get amount of full years in this interval.
    *</haxe_doc>
		</getYears>
		<getMonths public="1" set="method" line="211" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get amount of full months in this interval (always less then 12)
    *</haxe_doc>
		</getMonths>
		<getTotalMonths public="1" set="method" line="222" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get total amount of months in this interval.
    *
    * E.g. if interval contains 3 years and 5 months, then `interval.getTotalMonths()` returns 3 * 12 + 5 = 41
    *</haxe_doc>
		</getTotalMonths>
		<getDays public="1" set="method" line="231" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get amount of full days in this interval (always less then 31)
    *</haxe_doc>
		</getDays>
		<getTotalDays public="1" set="method" line="240" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get total amount of days in this interval.
    *</haxe_doc>
		</getTotalDays>
		<getHours public="1" set="method" line="249" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get amount of full hours in this interval (always less then 24)
    *</haxe_doc>
		</getHours>
		<getTotalHours public="1" set="method" line="258" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get total amount of hours in this interval.
    *</haxe_doc>
		</getTotalHours>
		<getMinutes public="1" set="method" line="267" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get amount of full minutes in this interval (always less then 60)
    *</haxe_doc>
		</getMinutes>
		<getTotalMinutes public="1" set="method" line="276" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get total amount of minutes in this interval.
    *</haxe_doc>
		</getTotalMinutes>
		<getSeconds public="1" set="method" line="285" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get amount of full seconds in this interval (always less then 60)
    *</haxe_doc>
		</getSeconds>
		<getTotalSeconds public="1" set="method" line="294" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get total amount of seconds in this interval.
    *</haxe_doc>
		</getTotalSeconds>
		<getTotalWeeks public="1" set="method" line="304" static="1">
			<f a="this">
				<c path="datetime.cores.DateTimeIntervalCore"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get total amount of weeks in this interval.
    *
    * Not calendar weeks, but each 7 days.</haxe_doc>
		</getTotalWeeks>
	</class>
	<abstract path="datetime.Timezone" params="" file="../src/datetime/Timezone.hx">
		<from>
			<icast><c path="datetime.data.TimezoneData"/></icast>
			<icast field="get"><c path="String"/></icast>
		</from>
		<this><c path="datetime.data.TimezoneData"/></this>
		<to><icast><c path="datetime.data.TimezoneData"/></icast></to>
		<haxe_doc>* Timezone data.
*</haxe_doc>
		<impl><class path="datetime._Timezone.Timezone_Impl_" params="" file="../src/datetime/Timezone.hx" private="1" module="datetime.Timezone">
	<_local line="15" static="1">
		<c path="datetime.data.TimezoneData"/>
		<haxe_doc>cache for local timezone</haxe_doc>
	</_local>
	<local public="1" set="method" line="22" static="1">
		<f a=""><x path="datetime.Timezone"/></f>
		<haxe_doc>* Get local timezone on current machine
    *</haxe_doc>
	</local>
	<get public="1" get="inline" set="null" line="36" static="1">
		<f a="name">
			<c path="String"/>
			<x path="datetime.Timezone"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>* Get timezone by IANA timezone name
    *</haxe_doc>
	</get>
	<_new get="inline" set="null" line="45" static="1">
		<f a="tz">
			<c path="datetime.data.TimezoneData"/>
			<c path="datetime.data.TimezoneData"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Constructor
    *</haxe_doc>
	</_new>
	<getName public="1" get="inline" set="null" line="54" static="1">
		<f a="this">
			<c path="datetime.data.TimezoneData"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get timezone name
    *</haxe_doc>
	</getName>
	<at public="1" get="inline" set="null" line="66" static="1">
		<f a="this:utc">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<x path="datetime.DateTime"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Find out what was the date/time at specified UTC time in this timezone
    * E.g.
    *   var utc = DateTime.fromString('2012-01-01 00:00:00');
    *   var tz = Timezone.get('Europe/Moscow');
    *   tz.at(utc).toString()  // 2014-01-01 04:00:00</haxe_doc>
	</at>
	<isDst public="1" get="inline" set="null" line="75" static="1">
		<f a="this:utc">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Check if Daylight Saving time is in effect in this zone at `utc` time
    *</haxe_doc>
	</isDst>
	<getAbbreviation public="1" get="inline" set="null" line="84" static="1">
		<f a="this:utc">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get timezone abbreviation at specified moment. E.g. EST for Eastern Standart Time
    *</haxe_doc>
	</getAbbreviation>
	<getOffset public="1" get="inline" set="null" line="93" static="1">
		<f a="this:utc">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get time offset relative to UTC time at specified moment.
    *   Returns amount of seconds.</haxe_doc>
	</getOffset>
	<getHHMM public="1" get="inline" set="null" line="102" static="1">
		<f a="this:utc">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Get time offset relative to UTC time at specified moment in HHMM format.
    *</haxe_doc>
	</getHHMM>
	<format public="1" set="method" line="118" static="1">
		<f a="this:utc:format">
			<c path="datetime.data.TimezoneData"/>
			<x path="datetime.DateTime"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Make a string according to `format`.
    *
    *   - `%z`  The time zone offset. Example: -0500 for US Eastern Time
    *   - `%Z`  The time zone abbreviation. Example: EST for Eastern Standart Time
    *
    * After timezone placeholders in `format` are processed `at(utc).format(format)` is called.</haxe_doc>
	</format>
</class></impl>
	</abstract>
	<class path="datetime._Timezone.Timezone_Impl_" params="" file="../src/datetime/Timezone.hx" private="1" module="datetime.Timezone">
		<_local line="15" static="1">
			<c path="datetime.data.TimezoneData"/>
			<haxe_doc>cache for local timezone</haxe_doc>
		</_local>
		<local public="1" set="method" line="22" static="1">
			<f a=""><x path="datetime.Timezone"/></f>
			<haxe_doc>* Get local timezone on current machine
    *</haxe_doc>
		</local>
		<get public="1" get="inline" set="null" line="36" static="1">
			<f a="name">
				<c path="String"/>
				<x path="datetime.Timezone"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>* Get timezone by IANA timezone name
    *</haxe_doc>
		</get>
		<_new get="inline" set="null" line="45" static="1">
			<f a="tz">
				<c path="datetime.data.TimezoneData"/>
				<c path="datetime.data.TimezoneData"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Constructor
    *</haxe_doc>
		</_new>
		<getName public="1" get="inline" set="null" line="54" static="1">
			<f a="this">
				<c path="datetime.data.TimezoneData"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get timezone name
    *</haxe_doc>
		</getName>
		<at public="1" get="inline" set="null" line="66" static="1">
			<f a="this:utc">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<x path="datetime.DateTime"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Find out what was the date/time at specified UTC time in this timezone
    * E.g.
    *   var utc = DateTime.fromString('2012-01-01 00:00:00');
    *   var tz = Timezone.get('Europe/Moscow');
    *   tz.at(utc).toString()  // 2014-01-01 04:00:00</haxe_doc>
		</at>
		<isDst public="1" get="inline" set="null" line="75" static="1">
			<f a="this:utc">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Check if Daylight Saving time is in effect in this zone at `utc` time
    *</haxe_doc>
		</isDst>
		<getAbbreviation public="1" get="inline" set="null" line="84" static="1">
			<f a="this:utc">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get timezone abbreviation at specified moment. E.g. EST for Eastern Standart Time
    *</haxe_doc>
		</getAbbreviation>
		<getOffset public="1" get="inline" set="null" line="93" static="1">
			<f a="this:utc">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get time offset relative to UTC time at specified moment.
    *   Returns amount of seconds.</haxe_doc>
		</getOffset>
		<getHHMM public="1" get="inline" set="null" line="102" static="1">
			<f a="this:utc">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Get time offset relative to UTC time at specified moment in HHMM format.
    *</haxe_doc>
		</getHHMM>
		<format public="1" set="method" line="118" static="1">
			<f a="this:utc:format">
				<c path="datetime.data.TimezoneData"/>
				<x path="datetime.DateTime"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Make a string according to `format`.
    *
    *   - `%z`  The time zone offset. Example: -0500 for US Eastern Time
    *   - `%Z`  The time zone abbreviation. Example: EST for Eastern Standart Time
    *
    * After timezone placeholders in `format` are processed `at(utc).format(format)` is called.</haxe_doc>
		</format>
	</class>
	<class path="datetime.cores.DateTimeIntervalCore" params="" file="../src/datetime/cores/DateTimeIntervalCore.hx">
		<negative public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates if this is negative interval</haxe_doc>
		</negative>
		<begin>
			<x path="datetime.DateTime"/>
			<haxe_doc>DateTime instance of the beginning of this interval</haxe_doc>
		</begin>
		<end>
			<x path="datetime.DateTime"/>
			<haxe_doc>DateTime instance of the end of this interval</haxe_doc>
		</end>
		<years>
			<x path="Int"/>
			<haxe_doc>amount of years</haxe_doc>
		</years>
		<months>
			<x path="Int"/>
			<haxe_doc>amount of months</haxe_doc>
		</months>
		<days>
			<x path="Int"/>
			<haxe_doc>amount of days</haxe_doc>
		</days>
		<hours>
			<x path="Int"/>
			<haxe_doc>amount of hours</haxe_doc>
		</hours>
		<minutes>
			<x path="Int"/>
			<haxe_doc>amount of minutes</haxe_doc>
		</minutes>
		<seconds>
			<x path="Int"/>
			<haxe_doc>amount of seconds</haxe_doc>
		</seconds>
		<getYears public="1" set="method" line="54">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full years in this interval.
    *</haxe_doc>
		</getYears>
		<getMonths public="1" set="method" line="93">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full months in this interval (always less then 12)
    *</haxe_doc>
		</getMonths>
		<getTotalMonths public="1" set="method" line="134">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of months in this interval.
    *   E.g. DateTimeInterval.fromString('(3y,5m)').getTotalMonths() returns 3 * 12 + 5 = 41
    *</haxe_doc>
		</getTotalMonths>
		<getDays public="1" set="method" line="143">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full days in this interval (always less then 31)
    *</haxe_doc>
		</getDays>
		<getTotalDays public="1" set="method" line="177">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of days in this interval.
    *</haxe_doc>
		</getTotalDays>
		<getHours public="1" set="method" line="186">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full hours in this interval (always less then 24)
    *</haxe_doc>
		</getHours>
		<getTotalHours public="1" set="method" line="214">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of hours in this interval.
    *</haxe_doc>
		</getTotalHours>
		<getMinutes public="1" set="method" line="223">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full minutes in this interval (always less then 60)
    *</haxe_doc>
		</getMinutes>
		<getTotalMinutes public="1" set="method" line="247">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of minutes in this interval.
    *</haxe_doc>
		</getTotalMinutes>
		<getSeconds public="1" set="method" line="256">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get amount of full seconds in this interval (always less then 60)
    *</haxe_doc>
		</getSeconds>
		<getTotalSeconds public="1" set="method" line="276">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Get total amount of seconds in this interval.
    *</haxe_doc>
		</getTotalSeconds>
		<getTotalWeeks public="1" set="method" line="285">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Get total amount of weeks in this interval.
    *   Not calendar weeks, but each 7 days.</haxe_doc>
		</getTotalWeeks>
		<new set="method" line="45">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Constructor.
    * Manual instantiation is not allowed.
    *</haxe_doc>
		</new>
		<haxe_doc>* Time interval representation.
*   Stores difference in seconds between two DateTime instances.
*   Amounts of years/months/days/hours/minutes/seconds are calculated accounting leap years.
*   Maximum allowed interval is ~4100 years.</haxe_doc>
		<meta>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.data.TimezoneData" params="" file="../src/datetime/data/TimezoneData.hx">
		<_cache line="14" static="1">
			<x path="Map">
				<c path="String"/>
				<c path="datetime.data.TimezoneData"/>
			</x>
			<haxe_doc>already instantiated timezones</haxe_doc>
		</_cache>
		<get public="1" set="method" line="31" static="1">
			<f a="name">
				<c path="String"/>
				<c path="datetime.data.TimezoneData"/>
			</f>
			<haxe_doc>* Get timezone data by timezone `name`.
    * `name` is like `Europe/Moscow`
    *
    * If specified timezon does not exist, UTC timezone returned instead</haxe_doc>
		</get>
		<name>
			<c path="String"/>
			<haxe_doc>IANA timezone name</haxe_doc>
		</name>
		<records><c path="Array"><c path="datetime.data.TimezoneDstRule"/></c></records>
		<getPeriodFor public="1" set="method" line="73">
			<f a="utc">
				<x path="datetime.DateTime"/>
				<c path="datetime.data.TimezonePeriod"/>
			</f>
			<haxe_doc>* Find appropriate period for specified utc time
    *</haxe_doc>
		</getPeriodFor>
		<new set="method" line="65">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Constructor
    *</haxe_doc>
		</new>
		<haxe_doc>* List of all timezones
*</haxe_doc>
		<meta>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.data.TimezonePeriod" params="" file="../src/datetime/data/TimezoneData.hx" module="datetime.data.TimezoneData">
		<isDst public="1">
			<x path="Bool"/>
			<haxe_doc>is this a DST period</haxe_doc>
		</isDst>
		<offset public="1">
			<x path="Int"/>
			<haxe_doc>offset of local time relative to UTC in seconds</haxe_doc>
		</offset>
		<abr public="1">
			<c path="String"/>
			<haxe_doc>timezone abbreviation for this period</haxe_doc>
		</abr>
		<new public="1" set="method" line="123"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="datetime.data.TimezoneDataRecord" params="" file="../src/datetime/data/TimezoneData.hx" module="datetime.data.TimezoneData">
		<extends path="datetime.data.TimezonePeriod"/>
		<time public="1">
			<x path="Float"/>
			<haxe_doc>utc time of last second of this period</haxe_doc>
		</time>
		<new public="1" set="method" line="131"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Describes one time period in timezone
*</haxe_doc>
	</class>
	<class path="datetime.data.TimezoneDstRule" params="" file="../src/datetime/data/TimezoneData.hx" module="datetime.data.TimezoneData">
		<extends path="datetime.data.TimezonePeriod"/>
		<wday public="1"><x path="Int"/></wday>
		<wdayNum public="1"><x path="Int"/></wdayNum>
		<month public="1"><x path="Int"/></month>
		<time public="1"><x path="Int"/></time>
		<new public="1" set="method" line="149"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Rules for switching to DST
*</haxe_doc>
	</class>
	<class path="datetime.data._TimezoneData.TimezoneDataStorage" params="" file="../src/datetime/data/TimezoneData.hx" private="1" module="datetime.data.TimezoneData">
		<data public="1" line="179" static="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></data>
		<haxe_doc>* Automatically generated timezone data.
* Any changes in this class will be lost.
*</haxe_doc>
	</class>
	<class path="datetime.utils.DateTimeIntervalUtils" params="" file="../src/datetime/utils/DateTimeIntervalUtils.hx">
		<strftime set="method" line="21" static="1">
			<f a="dti:format">
				<x path="datetime.DateTimeInterval"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Limited strftime implementation
    *</haxe_doc>
		</strftime>
		<formatPartial set="method" line="106" static="1">
			<f a="dti:format">
				<x path="datetime.DateTimeInterval"/>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>* Format each string in `format` but only fill one placeholder in each string.
    *</haxe_doc>
		</formatPartial>
		<new set="method" line="199">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Instantiating is not allowed
    *</haxe_doc>
		</new>
		<haxe_doc>* Utility functions for DateTimeInterval
*</haxe_doc>
		<meta>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.DateTimeMonthUtils" params="" file="../src/datetime/utils/DateTimeMonthUtils.hx">
		<days set="method" line="19" static="1">
			<f a="month:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns amount of days in specified month (1-12)
    *</haxe_doc>
		</days>
		<getMonth set="method" line="41" static="1">
			<f a="days:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get month number based on number of `days` passed since start of a year
    *</haxe_doc>
		</getMonth>
		<getMonthDay set="method" line="75" static="1">
			<f a="days:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get day number (1-31) based on number of `days` passed since start of a year
    *</haxe_doc>
		</getMonthDay>
		<toSeconds set="method" line="109" static="1">
			<f a="month:?isLeapYear" v=":false">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Convert month number to amount of seconds passed since year start
    *</haxe_doc>
		</toSeconds>
		<new set="method" line="144">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Instantiating is not allowed
    *</haxe_doc>
		</new>
		<haxe_doc>* Month-related helper methods
*</haxe_doc>
		<meta>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.DateTimeSnapUtils" params="" file="../src/datetime/utils/DateTimeSnapUtils.hx">
		<snapYear set="method" line="22" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest year.
    * Returns unix timestamp.</haxe_doc>
		</snapYear>
		<snapMonth set="method" line="48" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest month
    * Returns unix timestamp</haxe_doc>
		</snapMonth>
		<snapDay set="method" line="76" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest day
    * Returns unix timestamp</haxe_doc>
		</snapDay>
		<snapHour set="method" line="91" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest hour
    * Returns unix timestamp</haxe_doc>
		</snapHour>
		<snapMinute set="method" line="106" static="1">
			<f a="dt:direction">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest minute
    * Returns unix timestamp</haxe_doc>
		</snapMinute>
		<snapWeek set="method" line="121" static="1">
			<f a="dt:direction:required">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTSnapDirection"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Snap to nearest `required` week day
    * Returns unix timestamp</haxe_doc>
		</snapWeek>
		<new set="method" line="155">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Instantiating is not allowed
    *</haxe_doc>
		</new>
		<haxe_doc>* Snap implementations
*</haxe_doc>
		<meta>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.DateTimeUtils" params="" file="../src/datetime/utils/DateTimeUtils.hx">
		<fromString set="method" line="22" static="1">
			<f a="str">
				<c path="String"/>
				<x path="datetime.DateTime"/>
			</f>
			<haxe_doc>* Parse string into DateTime
    *</haxe_doc>
		</fromString>
		<clamp params="T" get="inline" set="null" line="53" static="1">
			<f a="value:min:max">
				<c path="clamp.T"/>
				<c path="clamp.T"/>
				<c path="clamp.T"/>
				<c path="clamp.T"/>
			</f>
			<haxe_doc>* Make sure `value` is not less than `min` and not greater than `max`
    *</haxe_doc>
		</clamp>
		<yearToStamp set="method" line="62" static="1">
			<f a="year">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Convert year number (4 digits) to DateTime-timestamp (seconds since 1 a.d.)
    *</haxe_doc>
		</yearToStamp>
		<addYear set="method" line="72" static="1">
			<f a="dt:amount">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Add specified amount of years to `dt`.
    * Returns unix timestamp.</haxe_doc>
		</addYear>
		<addMonth set="method" line="87" static="1">
			<f a="dt:amount">
				<x path="datetime.DateTime"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Add specified amount of years to `dt`
    *</haxe_doc>
		</addMonth>
		<getWeekDayNum set="method" line="116" static="1">
			<f a="dt:weekDay:num">
				<x path="datetime.DateTime"/>
				<x path="datetime.DTWeekDay"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>* Get unix timestamp of a specified `weekDay` in this month, which is the `num`st in current month.
    *</haxe_doc>
		</getWeekDayNum>
		<strftime set="method" line="141" static="1">
			<f a="dt:format">
				<x path="datetime.DateTime"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Limited strftime implementation
    *</haxe_doc>
		</strftime>
		<new set="method" line="242">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Instantiating is not allowed
    *</haxe_doc>
		</new>
		<haxe_doc>* Utility functions for DateTime
*</haxe_doc>
		<meta>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="datetime.utils.MacroUtils" params="" file="../src/datetime/utils/MacroUtils.hx"><haxe_doc>* Various macro utilities
*</haxe_doc></class>
	<class path="datetime.utils.TimezoneDetect" params="" file="../src/datetime/utils/TimezoneDetect.hx">
		<HEMISPHERE_SOUTH get="inline" set="null" line="52" static="1"><c path="String"/></HEMISPHERE_SOUTH>
		<timezones line="68" static="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></timezones>
		<ambiguities line="150" static="1">
			<x path="Map">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</x>
			<haxe_doc>* The keys in this object are timezones that we know may be ambiguous after
    * a preliminary scan through the olson_tz object.
    *
    * The array of timezones to compare must be in the order that daylight savings
    * starts for the regions.</haxe_doc>
		</ambiguities>
		<dst_starts line="175" static="1"><x path="Map">
	<c path="String"/>
	<c path="Date"/>
</x></dst_starts>
		<getTimezoneOffset set="method" line="222" static="1">
			<f a="date">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Get timezone offset in minutes
    *</haxe_doc>
		</getTimezoneOffset>
		<ambiguity_check set="method" line="238" static="1">
			<f a="tzName">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Checks if a timezone has possible ambiguities. I.e timezones that are similar.
    *
    * For example, if the preliminary scan determines that we're in America/Denver.
    * We double check here that we're really there and not in America/Mazatlan.
    *
    * This is done by checking known dates for when daylight savings start for different
    * timezones during 2010 and 2011.</haxe_doc>
		</ambiguity_check>
		<is_ambiguous set="method" line="258" static="1">
			<f a="tzName">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if it is possible that the timezone is ambiguous.</haxe_doc>
		</is_ambiguous>
		<get_date_offset set="method" line="268" static="1">
			<f a="date">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Gets the offset in minutes from UTC for a certain date.
    * @param {Date} date
    * @returns {Number}</haxe_doc>
		</get_date_offset>
		<get_date set="method" line="276" static="1">
			<f a="year:month:day">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Date"/>
			</f>
			<haxe_doc>* Get specified date with hours/minuts/seconds set to current moment
    * `day` - day of the month</haxe_doc>
		</get_date>
		<get_january_offset set="method" line="283" static="1"><f a="?year" v="-1">
	<x path="Int"/>
	<x path="Int"/>
</f></get_january_offset>
		<get_june_offset set="method" line="288" static="1"><f a="?year" v="-1">
	<x path="Int"/>
	<x path="Int"/>
</f></get_june_offset>
		<date_is_dst set="method" line="301" static="1">
			<f a="date">
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Private method.
    * Checks whether a given date is in daylight saving time.
    * If the date supplied is after august, we assume that we're checking
    * for southern hemisphere DST.
    * @param {Date} date
    * @returns {Boolean}</haxe_doc>
		</date_is_dst>
		<lookup_key set="method" line="331" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>* This function does some basic calculations to create information about
    * the user's timezone. It uses REFERENCE_YEAR as a solid year for which
    * the script has been tested rather than depend on the year set by the
    * client device.
    *
    * Returns a key that can be used to do lookups in jstz.olson.timezones.
    * eg: "720,1,2".
    *
    * @returns {String}</haxe_doc>
		</lookup_key>
		<detect set="method" line="354" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Uses get_timezone_info() to formulate a key to use in the olson.timezones dictionary.
    *
    * Returns a primitive object on the format:
    * {'timezone': TimeZone, 'key' : 'the key used to find the TimeZone object'}
    *
    * @returns timezone name</haxe_doc>
		</detect>
		<dst_start_for set="method" line="376" static="1">
			<f a="tz_name">
				<c path="String"/>
				<t path="Null"><c path="Date"/></t>
			</f>
			<haxe_doc>* This object contains information on when daylight savings starts for
    * different timezones.
    *
    * The list is short for a reason. Often we do not have to be very specific
    * to single out the correct timezone. But when we do, this list comes in
    * handy.
    *
    * Each value is a date denoting when daylight savings starts for that timezone.</haxe_doc>
		</dst_start_for>
		<haxe_doc>* Local timezone detection.
* Notice from original author of `jstimezonedetect`:
*
* `Use Case
* The script is useful if you do not want to disturb your users with questions about what time zone they are in. You can rely on this script to give you a key that is usable for server side datetime normalisations across time zones.
*
* Limitations
* This script does not do geo-location, nor does it care very much about historical time zones.
* So if you are unhappy with the time zone "Europe/Berlin" when the user is in fact in "Europe/Stockholm" - this script is not for you. (They are both identical in modern time).
* Also, if it is important to you to know that in Europe/Simferopool (Ukraine) the UTC offset before 1924 was +2.67, sorry, this script will not help you.
* Time zones are a screwed up thing, generally speaking, and the scope of this script is to solve problems concerning modern time zones, in this case from 2010 and forward.
* `</haxe_doc>
		<meta>
			<m n=":allow"><e>datetime</e></m>
			<m n=":access"><e>datetime</e></m>
		</meta>
	</class>
	<class path="haxe.EnumTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params" v="::null">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<class path="haxe.Unserializer" params="" file="/usr/lib/haxe/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" line="60" static="1">
			<t path="haxe.TypeResolver"/>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a Class or Enum instance from a given String. By
		default, the haxe Type Api is used.

		A type resolver must provide two methods:

		1. resolveClass(name:String):Class<Dynamic> is called to determine a
				Class from a class name
		2. resolveEnum(name:String):Enum<Dynamic> is called to determine an
				Enum from an enum name

		This value is applied when a new Unserializer instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 line="62" static="1"><c path="String"/></BASE64>
		<CODES line="65" static="1"><c path="Array"><x path="Int"/></c></CODES>
		<initCodes set="method" line="67" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="433" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its unserialize() method
		once.</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="124">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is null, a special resolver is used which returns null for all
		input values.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</setResolver>
		<readDigits set="method" line="147"><f a=""><x path="Int"/></f></readDigits>
		<unserializeObject set="method" line="172"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum set="method" line="187"><f a="edecl:tag">
	<x path="Enum"><unknown/></x>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="219">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from Type.createEmptyInstance, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="99">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc>The Unserializer class is the complement to the Serializer class. It parses
	a serialization String and creates objects from the contained data.

	This class can be used in two ways:

	- create a new Unserializer() instance with a given serialization
		String, then call its unserialize() method until all values are
		extracted
	- call Unserializer.run() to unserialize a single value from a given
		String</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="/usr/lib/haxe/std/haxe/ds/IntMap.hx" extern="1">
		<implements path="IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/usr/lib/haxe/std/haxe/ds/ObjectMap.hx" extern="1">
		<implements path="IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.</haxe_doc>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/usr/lib/haxe/std/haxe/ds/StringMap.hx" extern="1">
		<implements path="IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
	</class>
	<class path="haxe.io.Bytes" params="" file="/usr/lib/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="357" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/lib/haxe/std/haxe/io/BytesData.hx"><c path="Array"><x path="Int"/></c></typedef>
	<class path="haxe.io.Eof" params="" file="/usr/lib/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<haxe_doc>This exception is raised when reading while data is no longer available in the [Input].</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.macro.Expr" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.Case" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<guard>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</guard>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Var" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Catch" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></typedef>
	<typedef path="haxe.macro.TypePath" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params>
		<c path="Array"><e path="haxe.macro.TypeParam"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<c path="Array"><t path="haxe.macro.Expr"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><t path="haxe.macro.MetadataEntry"/></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<typedef path="haxe.macro.AnonType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<status><e path="haxe.macro.AnonStatus"/></status>
	<fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><x path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<overrides><c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c></overrides>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><t path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><c path="haxe.ds.StringMap"><t path="haxe.macro.EnumField"/></c></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<unops><c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></unops>
	<type><e path="haxe.macro.Type"/></type>
	<to><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></to>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<impl><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></from>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<binops><c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></binops>
	<array><c path="Array"><t path="haxe.macro.ClassField"/></c></array>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
	<id><x path="Int"/></id>
	<extra><t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t></extra>
	<capture><x path="Bool"/></capture>
</a></typedef>
	<typedef path="haxe.macro.TFunc" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
	<args><c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c></args>
</a></typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.TypedExprDef"/></expr>
</a></typedef>
</haxe>